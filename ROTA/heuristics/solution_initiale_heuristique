def solution_initiale(data, avion):
    solution = []
    slots_disponibles = data["slots"].copy()
    vols_tries = sorted(avion.flights, key=lambda v: max(v["profit"]), reverse=True)
    planning = np.zeros((data["n_aircraft"], data["time_horizon_len"]), dtype=int)
    profit_total = 0

    for v in vols_tries:
        destination = v["destination"]
        duree = data["destinations"][destination - 1]["flight_time"]
        profits = v["profit"]

        for t in range(data["time_horizon_len"] - duree + 1):
            if slots_disponibles[t] > 0:
                for k in range(data["n_aircraft"]):
                    # Vérifier si les créneaux de t à t + durée - 1 sont libres
                    if np.all(planning[k][t:t + duree] == 0):
                        # Affecter le vol
                        planning[k][t:t + duree] = 1
                        slots_disponibles[t] -= 1
                        profit_total += profits[t]
                        solution.append((k, destination, t))
                        break  # Sortie du loop sur les avions
                else:
                    continue  # Aucun avion trouvé, on passe au temps suivant
                break  # Vol assigné, on passe au vol suivant

    return solution, profit_total, planning